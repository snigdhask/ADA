class Solution {
    int solve(int i,vector<int>& prices,vector<vector<int>>&dp,bool ready)
    {
        if(i==prices.size())
        return 0;
        if(dp[i][ready]!=-1)
        {
            return dp[i][ready];
        }
        int take=0,noTake=0;
        if(ready)
        {
            take=prices[i]+solve(i+1,prices,dp,false);
        }else{
            take=-prices[i]+solve(i+1,prices,dp,true);
        }
        noTake=solve(i+1,prices,dp,ready);
        return dp[i][ready]=max(take,noTake);
    }
public:
    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        vector<vector<int>>dp(n,vector<int>(2,-1));
        return solve(0,prices,dp,false);
    }
};
